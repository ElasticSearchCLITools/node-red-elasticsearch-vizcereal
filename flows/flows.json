[{"id":"4e715ff9.81137","type":"tab","label":"Basic Flow","disabled":false,"info":""},{"id":"78412a21.75dd14","type":"tab","label":"Elasticsearch","disabled":false,"info":""},{"id":"d3445511.71feb8","type":"remote-server","z":"","name":"elk","host":"http://hd1melk20lx.digital.hbc.com:9200","timeout":"600000","reqtimeout":"600000"},{"id":"3fd1590.b4836a8","type":"switch","z":"4e715ff9.81137","name":"Toggle Decide","property":"toggle","propertyType":"global","rules":[{"t":"eq","v":"simple","vt":"str"},{"t":"eq","v":"live","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":3,"x":140,"y":200,"wires":[["8145a055.93b3e"],["6805fe96.496c7"],["357d08d0.e1c838"]]},{"id":"72dacd8e.b276a4","type":"http response","z":"4e715ff9.81137","name":"","statusCode":"","headers":{"content-type":"application/json"},"x":670,"y":200,"wires":[]},{"id":"bd3555a7.4f7bb8","type":"http in","z":"4e715ff9.81137","name":"/query-elasticsearch","url":"/query-elasticsearch","method":"get","upload":false,"swaggerDoc":"","x":130,"y":60,"wires":[["3fd1590.b4836a8"]]},{"id":"54e55800.b1ee78","type":"change","z":"78412a21.75dd14","name":"Search Query BM Access Logs","rules":[{"t":"set","p":"body","pt":"msg","to":"{\"size\":0,\"query\":{\"bool\":{\"must\":[{\"range\":{\"@timestamp\":{\"gt\":\"now-45m\"}}},{\"term\":{\"type\":\"bluemartini-accesslogs\"}},{\"query_string\":{\"query\":\"host:sd1pxx1*\"}}]}},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"apps\":{\"terms\":{\"field\":\"vhost\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"nodes\":{\"terms\":{\"field\":\"host_ip\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}}}},\"clients\":{\"terms\":{\"field\":\"clientip\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}}}}}}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":230,"y":260,"wires":[["8d53de17.a17f9"]]},{"id":"8d53de17.a17f9","type":"es-aggregations","z":"78412a21.75dd14","name":"BM Access Logs","documentIndex":"s5a-*","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":490,"y":260,"wires":[["f1cd6e91.6b892","c36d088b.a5cef8"]]},{"id":"f1cd6e91.6b892","type":"function","z":"78412a21.75dd14","name":"transform BM Website Data ","func":"var viz_data = msg.viz_data\n// bm Website for www.saksfifthavenue.com\nlet s5aIndex       = viz_data.nodes.findIndex((f)=> f.name === \"www.saksfifthavenue.com\")\nlet websiteIndex   = msg.payload.aggregations.apps.buckets.findIndex((f)=> f.key === \"website\")\nlet s5aApache = viz_data.nodes[s5aIndex]\nlet websiteApp = msg.payload.aggregations.apps.buckets[websiteIndex]\n//create new nodes\nlet nodes = websiteApp.nodes.buckets.map((n)=>{\n            return {\n                \"name\": n.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n})\n\n// create connections between website and nodes\nwsConnNodes = websiteApp.nodes.buckets.map((m) =>{\n     let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n     for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": \"website\",\n    \"target\":  m.key,\n    \"metrics\": met\n    }    \n})\n\napacheConnWs = websiteApp.clients.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": m.key,\n    \"target\":  \"website\",\n    \"metrics\": met\n    }    \n})\n\n// Created Website Node\ns5aApache.nodes.push({\n              \"name\": \"website\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\",\n            })\ns5aApache.nodes = s5aApache.nodes.concat(nodes)\ns5aApache.connections = s5aApache.connections.concat(apacheConnWs).concat(wsConnNodes)\n\n\n//////////----------------------------------------\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":740,"y":260,"wires":[["f527f39c.dcfcd"]]},{"id":"a3a80981.44a068","type":"json","z":"78412a21.75dd14","name":"JSON to String","property":"payload","action":"str","pretty":true,"x":620,"y":380,"wires":[["ab4161d5.f0b77"]]},{"id":"e46f8c6e.21fa6","type":"function","z":"78412a21.75dd14","name":"transform Node Data data","func":"function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\nvar viz_data = msg.viz_data\nvar n = msg.payload.aggregations.regions.buckets.map((r)=>{\n    let ri = viz_data.nodes.findIndex((f)=> f.name === r.key)\n    if ( ri >= 0 ){\n        viz_data.nodes[ri].nodes = r.nodes.buckets.map((m) =>{\n            return {\n                \"name\": m.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n        }).concat([{\n              \"name\": \"INTERNET\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"\n            },{\"name\": \"F5\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"}]\n        )\n        let imet = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n        for (i =0; i < r.metrics.buckets.length; i++){\n            if ( r.metrics.buckets[i].key < 400 )   imet.normal  += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 400 && \n                 r.metrics.buckets[i].key < 500 )   imet.warning += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 500 )  imet.danger  += r.metrics.buckets[i].doc_count;\n        }\n        c = r.nodes.buckets.map((m) =>{\n            let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n            for (i =0; i < m.metrics.buckets.length; i++){\n                if ( m.metrics.buckets[i].key < 400 )    met.normal  += m.metrics.buckets[i].doc_count;\n                if ( (m.metrics.buckets[i].key >= 400 ) && \n                     (m.metrics.buckets[i].key < 500) )  met.warning += m.metrics.buckets[i].doc_count;\n                if ( m.metrics.buckets[i].key >= 500 )   met.danger  += m.metrics.buckets[i].doc_count;\n            }\n            return {\n            \"source\": \"F5\",\n            \"target\":  m.key,\n            \"metrics\": met\n            }    \n        }).concat([\n            {   \"source\": \"INTERNET\",\n                \"target\":  \"F5\",\n                \"metrics\": imet\n            }\n            ])\n        viz_data.nodes[ri].connections=c\n    } // end region\n\n});\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":590,"y":140,"wires":[["54e55800.b1ee78"]]},{"id":"6b23e984.0c2f68","type":"function","z":"78412a21.75dd14","name":"transform reagion  data","func":"function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\nvar whenupdate = Date.now();\nviz_data={\n            // Which graph renderer to use for this graph (currently only 'global' and 'region')\n            renderer: 'global',\n            // since the root object is a node, it has a name too.\n            name: 'edge',\n            // OPTIONAL: The maximum volume seen recently to relatively measure particle density. \n            // This 'global' maxVolume is optional because it can be calculated by using all of the required sub-node maxVolumes.\n            maxVolume: msg.payload.hits.total*50,\n            // list of nodes for this graph\n            nodes: [\n                {\n                    \"renderer\": 'region',\n                    layout: 'ltrTree',\n                    // OPTIONAL Override the default layout used for the renderer.\n                    \"name\": 'INTERNET',\n                    // Unix timestamp. Only checked at this level of nodes. Last time the data was updated \n                    // (Needed because the client could be passed stale data when loaded)\n                    metadata: {},\n                    maxVolume: msg.payload.hits.total*25,\n\n                    \"nodes\": [],\n                    \"notices\":[\n                         {\n                              // The title to display on the notice\n                              title: 'Notice about something',\n                              // OPTIONAL link to send the user when click on the notice\n                              link: 'http://link/to/relevant/thing',\n                              // OPTIONAL 0(default) for info level, 1 for warning level, 2 for error level (applies CSS styling)\n                              severity: 1\n                            }\n                     ],\n                    // The maximum volume seen recently to relatively measure particle density\n                }// end of INTERNET NODE\n            ],\n            connections:[]\n        }\n        \n\nviz_data.nodes.metrics = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\nfor (i =0; i < msg.payload.aggregations.metrics.buckets.length; i++){\n    if ( msg.payload.aggregations.metrics.buckets[i].key < 400 )                 viz_data.nodes.metrics.normal  += msg.payload.aggregations.metrics.buckets[i].doc_count;\n    if ( msg.payload.aggregations.metrics.buckets[i].key >= 400 && \n        msg.payload.aggregations.metrics.buckets[i].key < 500 ) viz_data.nodes.metrics.warning += msg.payload.aggregations.metrics.buckets[i].doc_count;\n    if ( msg.payload.aggregations.metrics.buckets[i].key >= 500 )                viz_data.nodes.metrics.danger  += msg.payload.aggregations.metrics.buckets[i].doc_count;\n}\n\nvar n = msg.payload.aggregations.regions.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n        if ( m.metrics.buckets[i].key < 400 )                 met.normal  += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 400 && m.metrics.buckets[i].key < 500 ) met.warning += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 500 )                met.danger  += m.metrics.buckets[i].doc_count;\n    }\n    return  {\n        \"name\": m.key,\n        \"renderer\": \"region\",\n        \"class\": \"normal\",\n        \"clusters\": [],\n        \"nodes\":[],\n        \"metrics\": met,\n        \"connections\": [],\n        \"updated\": whenupdate,\n        maxVolume: m.doc_count * 25\n\n    }\n})\nviz_data.nodes = viz_data.nodes.concat(n)\n\nvar c = msg.payload.aggregations.regions.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n        if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 400 && \n             m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n    }\n    return {\n        \"source\": \"INTERNET\",\n        \"target\":  m.key,\n        \"metrics\": met\n    }\n});\nviz_data.connections = c\n\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":340,"y":140,"wires":[["e46f8c6e.21fa6"]]},{"id":"9602cb9d.f75698","type":"es-aggregations","z":"78412a21.75dd14","name":"S5A Webservers","documentIndex":"s5a-*","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":690,"y":40,"wires":[["6b23e984.0c2f68","1c56c886.e69c57"]]},{"id":"afee8d36.49fcf","type":"change","z":"78412a21.75dd14","name":"Search Webtier (toggle=0)","rules":[{"t":"set","p":"body","pt":"msg","to":"{\"size\":0,\"query\":{\"bool\":{\"must\":[{\"range\":{\"@timestamp\":{\"gt\":\"now-45m\"}}},{\"term\":{\"type\":\"apache\"}},{\"query_string\":{\"query\":\"host:sd1pwb0*\"}}]}},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"regions\":{\"terms\":{\"field\":\"vhost\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"nodes\":{\"terms\":{\"field\":\"host_ip\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}}}}}}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":40,"wires":[["9602cb9d.f75698"]]},{"id":"f527f39c.dcfcd","type":"change","z":"78412a21.75dd14","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"viz_data","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":380,"wires":[["a3a80981.44a068"]]},{"id":"ab4161d5.f0b77","type":"http response","z":"78412a21.75dd14","name":"","statusCode":"","headers":{"content-type":"application/json"},"x":810,"y":380,"wires":[]},{"id":"c36d088b.a5cef8","type":"debug","z":"78412a21.75dd14","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":670,"y":220,"wires":[]},{"id":"6805fe96.496c7","type":"link out","z":"4e715ff9.81137","name":"To Search Flow","links":["b28070a2.00605"],"x":335,"y":220,"wires":[]},{"id":"b28070a2.00605","type":"link in","z":"78412a21.75dd14","name":"Search","links":["6805fe96.496c7"],"x":175,"y":40,"wires":[["afee8d36.49fcf"]]},{"id":"1c56c886.e69c57","type":"debug","z":"78412a21.75dd14","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":850,"y":100,"wires":[]},{"id":"8145a055.93b3e","type":"file in","z":"4e715ff9.81137","name":"sample_data_simple","filename":"./vizceral-example/src/sample_data_simple.json","format":"utf8","chunk":false,"sendError":false,"x":420,"y":160,"wires":[["72dacd8e.b276a4"]]},{"id":"357d08d0.e1c838","type":"file in","z":"4e715ff9.81137","name":"Complex sample_data","filename":"./vizceral-example/src/sample_data.json","format":"utf8","chunk":false,"sendError":false,"x":420,"y":280,"wires":[["72dacd8e.b276a4"]]},{"id":"808f2e8a.9353c","type":"http in","z":"4e715ff9.81137","name":"","url":"/toggle","method":"get","upload":false,"swaggerDoc":"","x":140,"y":380,"wires":[["84d994eb.1d1f28"]]},{"id":"84d994eb.1d1f28","type":"change","z":"4e715ff9.81137","name":"","rules":[{"t":"set","p":"toggle","pt":"global","to":"payload.toggle","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":360,"y":380,"wires":[["488cf300.7d25ec","6c70793f.66b698"]]},{"id":"488cf300.7d25ec","type":"template","z":"4e715ff9.81137","name":"Toggle Page","field":"payload","fieldType":"msg","format":"html","syntax":"mustache","template":"Toggle Set to {{ payload.toggle }}\n<table border=1>\n    <tr><th>URL</th><th>Discription</th></tr>\n    <tr><td><a href=\"/toggle?toggle=live\">/toggle?toggle=live</a></td><td>Set for live Elasticsearch searching. Make sure you have the configured</td></tr>\n    <tr><td><a href=\"/toggle?toggle=simple\">/toggle?toggle=simple</a></td><td>Simple Static Data </td></tr>\n    <tr><td><a href=\"/toggle?toggle=complex\">/toggle?toggle=complex</a></td><td>Complex static Data </td></tr>\n</table>\n<table border=1>\n    <tr><th>URL</th><th>descriptions</th></tr>\n    <tr><td><a href=\"/query-elasticsearch\">/query-elasticsearch</a></td><td>Show the raw viz data</td></tr>\n    <tr><td><a href=/toggle>toggle</a></td><td>This page</td></tr>\n    <tr><td><a href=/ >/</a></td><td>Show Vizceral graph</td></tr>\n</table>","output":"str","x":570,"y":380,"wires":[["800dcd33.6a898"]]},{"id":"800dcd33.6a898","type":"http response","z":"4e715ff9.81137","name":"","statusCode":"","headers":{"content-type":"text/html"},"x":800,"y":380,"wires":[]},{"id":"6c70793f.66b698","type":"debug","z":"4e715ff9.81137","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":320,"y":480,"wires":[]}]